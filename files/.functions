#!/bin/bash



case "$(uname -s)" in
Darwin)
;;
*)
battery() {
    # Get battery stats
    upower -i "$(upower -e | grep BAT)" |
        grep -E --color=never 'state|to empty|percentage'
}
;;
esac



ckeys() {
    # Run xev but show only key presses
    local regex='^.+(keycode) ([0-9]+) \((keysym) ([^,]+), ([^\)]+)\).+$'
    local replace='key: \5   \1: \2   \3: \4'
    xev -event keyboard | sed -En "/keysym/ s/$regex/$replace/p"
}



feh() {
    DISPLAY=:0 /usr/bin/feh --scale-down -x "$@" &>/dev/null & disown
}



case "$(uname -s)" in
Darwin)
file_birth() {
    stat -f '%SB' -t '%Y-%m-%d %I:%M:%S %p' "$@"
}
;;
*)
file_birth() {
    inode="$(stat -c %i "$1")"
    dev="$(df --output=source "$1" | tail -1)"
    sudo debugfs -R "stat <$inode>" "$dev" \
      | grep crtime \
      | cut -d ' ' -f 4-
}
;;
esac



force_wifi() {
    # Open http site to force WAP portal redirect
    xdg-open 'https://google.com' &>/dev/null & disown
}



gcl() {
    local gc='git clone --recurse-submodules'
    # git clone username/repo(.git) or repo(.git)
    # In the case without a username, it's assumed the repo is mine
    for name in "$@"; do
        local repo="${name%.git}"
        if [[ $repo =~ ^.*/$ || $repo =~ ^/.+$ ]]; then
            # Invalid repo names:
            #  abc/
            #  /abc
            #  /
            echo "invalid repo name: $repo" >&2
        elif [[ $repo =~ .+/.+ ]]; then
            # Clone someone else's repo
            eval "$gc" "https://github.com/${repo}.git"
        else
            # Clone my repo
            eval "$gc" "git@github.com:nelson137/${repo}.git"
        fi
    done
}



# Get public and private ip addresses
case "$(uname -s)" in
Darwin)
getip() {
    echo "Public:  $(curl -s https://icanhazip.com)"
    echo -n "Private:"
    ifconfig \
      | grep 'inet ' \
      | awk '$2!="127.0.0.1"{printf " %s",$2} END{printf "\n"}'
}
;;
*)
getip() {
    echo "Public:  $(curl -s https://icanhazip.com)"
    local private_ip="$(
        ip route get 1 |
        grep -oE '192\.168(\.[0-9]{1,3}){2}' |
        grep -v '^192\.168\.1\.1$'
    )"
    echo "Private: $private_ip"
}
;;
esac



is_wsl() {
    grep -qE '(Microsoft|WSL)' /proc/version 2>/dev/null
}



newscript() {
    # Make a new script with boilerplate code and executable if necessary
    [[ $# == 0 ]] && files=( t.sh ) || files=( $@ )
    for f in $files; do
        if [[ -e $f ]]; then
            echo "script already exists: $f" >&2
            continue
        fi

        touch "$f"
        print -s "vim $f"
        if [[ $f =~ .+[.]c$ ]]; then
            cat <<'EOF' > "$f"
#include <stdio.h>


int main(void) {

    return 0;
}
EOF
            vim +3 "$f"
        elif [[ $f =~ .+[.]cpp$ ]]; then
            cat <<'EOF' > "$f"
#include <iostream>
#include <string>
#include <vector>

using namespace std;


int main() {

    return 0;
}
EOF
            vim +6 "$f"
        elif [[ $f =~ .+[.]py$ ]]; then
            cat <<'EOF' > "$f"
#!/usr/bin/env python3



EOF
            vim + +startinsert "$f"  # "+" puts cursor at bottom of file
            chmod +x "$f"
        elif [[ $f =~ .+[.]zsh$ ]]; then
            echo '#!/bin/zsh\n\n\n' > "$f"
            vim + +startinsert "$f"
            chmod +x "$f"
        else
            echo '#!/bin/bash\n\n\n' > "$f"
            vim + +startinsert "$f"
            chmod +x "$f"
        fi
    done
}



ping() {
    if [[ $# == 1 && "$1" == gateway ]]; then
        command ping -c3 "$(ip route | awk '/default/ {print $3}')"
    else
        command ping "$@"
    fi
}



py_include() {
    find_py_include() {
        find /usr/include -maxdepth 1 -name "$1" | sort -n | head -1
    }
    pi3=$(find_py_include 'python3*')
    pi2=$(find_py_include 'python2*')
    [[ -n "$pi3" ]] && echo "$pi3" || echo "$pi2"
}



xset() {
    [[ $# == 2 && $1 == q ]] || { /usr/bin/xset "$@"; return $?; }

    local setting
    case "$2" in
        keyboard) setting='Keyboard Control' ;;
        mouse)    setting='Pointer Control' ;;
        s)        setting='Screen Saver' ;;
        p)        setting='Colors' ;;
        fp)       setting='Font Path' ;;
        dpms)     setting='DPMS \(Energy Star\)' ;;
        *)        echo "xset setting not recognized: $2" >&2; return 1 ;;
    esac

    xset q | sed -E "/$setting:/,/^\\S/!d" | sed -E '$s/^(\S)/\1/;Te;d;:e'
}
