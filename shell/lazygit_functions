# vim: ft=bash
#
# This is the file sourced by lazygit when running custom commands, see
# `config/lazygit/config.yml`. Note that only the git aliases/functions that
# would make sense to run within lazygit are duplicated here.

g() git "$@"

ga() git add --all "$@"

gb() git branch "$@"
gbd() git branch --delete "$@"
gbd!() git branch --delete --force "$@"
gbm() git branch --move "$@"
gbu() git branch --set-upstream-to "$@"
gbUU() git branch --unset-upstream "$@"
gbv() git branch -vv "$@"

gcat() git cat-file "$@"

gco() git checkout "$@"
gcob() git checkout -b "$@"

gc() git commit -v "$@"
gca() git commit -v --all "$@"
gcam() git commit -v --all -m "$@"
gca!() git commit -v --all --amend --no-edit "$@"
gc!() git commit -v --amend --no-edit "$@"
gcmsg() git commit -m "$@"

gcf() git config --list "$@"

gds() git diff --stat "$@"
gdcas() git diff --cached --stat "$@"
gdss() {
    local stat="$(git diff --shortstat "$@")"
    [[ $stat =~ '([0-9]+) ins.* ([0-9]+) del' ]] &&
        printf -- '%s, %+d line delta\n' "$stat" "$(( ${match[1]} - ${match[2]} ))"
}

gf() git fetch "$@"

gi() git init "$@"

gmv() git mv "$@"

gl() git pull "$@"
gl!() git pull --force "$@"

gp() git push "$@"
gp!() git push --force-with-lease "$@"
gpd() git push --dry-run "$@"
gpsup() git push --set-upstream origin $(git_current_branch) "$@"

_git_push_selected_commit() {
    if (( $# < 2 )); then
        echo 'Usage: _git_push_selected_commit COMMIT_HASH LOCAL_BRANCH [UPSTREAM_REMOTE] [UPSTREAM_BRANCH]' >&2
        return 1
    fi

    local commit_hash local_branch upstream_remote upstream_branch
    commit_hash=$1; (( $# > 0 )) && shift
    local_branch=$1; (( $# > 0 )) && shift
    upstream_remote=$1; (( $# > 0 )) && shift
    upstream_branch=$1; (( $# > 0 )) && shift

    local remote
    if [[ -n $upstream_remote ]]; then
        remote=$upstream_remote
    else
        remote=origin
        # Ensure there is an `origin` remote
        if ! command git remote get-url "$remote" &>/dev/null; then
            echo "Error: branch has no upstream remote and default remote '$remote' does not exist" >&2
            return 1
        fi
    fi

    local branch
    branch=${upstream_branch:-refs/heads/$local_branch}

    git push --force-with-lease "$remote" "$commit_hash:$branch"

    # Set upstream branch if pushing for the first time
    if [[ -z $upstream_branch ]]; then
        git branch --set-upstream-to="$remote/$local_branch" "$local_branch"
    fi
}

grb() git rebase "$@"
grba() git rebase --abort "$@"
grbc() git rebase --continue "$@"

gr() git remote "$@"
gra() git remote add "$@"
grget() git remote get-url "$@"
grset() git remote set-url "$@"
grpa() { git remote | xargs git remote prune; }

grh() git reset "$@"
grhh() git reset --hard "$@"

grm() git rm -r "$@"

grs() git restore "$@"
grsp() git restore -p "$@"

gsta() git stash push "$@"
gstam() git stash push -m "$@"
gstaa() git stash apply "$@"
gstd() git stash drop "$@"
gstp() git stash pop "$@"
gstl() git stash list "$@"
gstls() git stash show --compact-summary "$@"
gsts() git stash show --text "$@"

gs() git status "$@"
gss() git status -s "$@"

gsa() git submodule add --depth=1 "$@"
gsu() git submodule update --init --recursive --depth=1 "$@"

gw() git switch "$@"
gwc() git switch --create "$@"
gwd() git switch --detach "$@"

grt() cd "$(git rev-parse --show-toplevel || echo .)"
