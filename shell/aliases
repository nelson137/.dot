# vim: ft=bash

# System-specific aliases

if [[ -d /mnt/c/Users ]]; then
    alias desktop="cd /mnt/c/Users/$USER"
else
    alias desktop='cd ~/Desktop'
fi

case "$(uname -s)" in
    Darwin*)
        alias win10wine='MTL_HUD_ENABLED=0 WINEESYNC=1 WINEPREFIX=/opt/Windows10 /usr/local/opt/game-porting-toolkit/bin/wine64'
        ;;
    *) ;;
esac

if command -v kitten &>/dev/null; then
    alias imgcat='kitten icat'
fi

# Mine
alias aliases='vim ~/.dot/files/aliases'
alias funcs='vim ~/.dot/files/functions'
alias socwd='command du -csh . | tail -1'
alias setbg="nitrogen --set-zoom-fill --random ~/.config/i3/assets/backgrounds"
alias vimrc='vim ~/.vimrc'
alias wifi='nohup nm-connection-editor &>/dev/null &!'
alias zshhist='vim ~/.zsh_history'
alias zshenv='vim ~/.zshenv'
alias zshrc='vim ~/.zshrc'
alias wsl='/mnt/c/Windows/System32/wsl.exe'

# Commands
if command -v bat &>/dev/null; then
    alias cat='bat'
fi
alias bc='bc -ql'
alias diff='git diff --no-index'
alias du='du -h'
alias less='less -c'
alias lg='lazygit'
alias mkdir='mkdir -p'
alias mv='mv -i'
alias npmi='npm install'
alias pdflatex='pdflatex -file-line-error'
alias sqlite3='sqlite3 -header -column'
which nvim &>/dev/null && alias vim='nvim'
alias wget="wget --hsts-file $HOME/.local/share/wget/wget-hsts"
alias whois='whois -H'
alias zathura='zathura --fork'

# ls
LS="command ls -vhp"
case "$(uname -s)" in
    Linux*) LS="$LS --color=auto --time-style=long-iso --group-directories-first" ;;
    Darwin*) LS="$LS -G" ;;
esac
alias ls="$LS"
alias la="$LS -A"
alias ll="$LS -l"
alias lla="$LS -lA"
alias llD="$LS -ld"

# git
g() git "$@"

ga() git add --all "$@"
gapa() git add --patch "$@"

gbs() git bisect "$@"
gbsb() git bisect bad "$@"
gbsg() git bisect good "$@"
gbsr() git bisect reset "$@"
gbss() git bisect start "$@"

gb() git branch "$@"
gbd() git branch --delete "$@"
gbd!() git branch --delete --force "$@"
gbm() git branch --move "$@"
gbu() git branch --set-upstream-to "$@"
gbUU() git branch --unset-upstream "$@"
gbv() git branch -vv "$@"

gcat() git cat-file "$@"

gco() git checkout "$@"
gcob() git checkout -b "$@"
gcop() git checkout --patch "$@"

gpi() git cherry-pick "$@"
gpia() git cherry-pick --abort "$@"
gpic() git cherry-pick --continue "$@"

gc() git commit -v "$@"
gca() git commit -v --all "$@"
gcam() git commit -v --all -m "$@"
gcae() git commit -v --all --amend --allow-empty --edit "$@"
gca!() git commit -v --all --amend --no-edit "$@"
gce() git commit -v --amend --allow-empty --edit "$@"
gc!() git commit -v --amend --no-edit "$@"
gcmsg() git commit -m "$@"

gcf() git config --list "$@"

gd() git diff "$@"
gds() git diff --stat "$@"
gdca() git diff --cached "$@"
gdcas() git diff --cached --stat "$@"
gdss() {
    local stat="$(git diff --shortstat "$@")"
    [[ $stat =~ '([0-9]+) ins.* ([0-9]+) del' ]] &&
        echo "$stat, $(( ${match[1]} - ${match[2]} )) line delta"
}

gf() git fetch "$@"

gi() git init "$@"

glo() git log --pretty=oneline-full -24 "$@"
gloa() git log --pretty=oneline-full "$@"
glop() git log -p "$@"
glos() git log --compact-summary "$@"
glgg() git log --graph "$@"
glog() git log --graph --oneline --decorate "$@"
gloga() git log --graph --oneline --decorate --all "$@"

gm() git merge "$@"
gma() git merge --abort "$@"

gmv() git mv "$@"

gl() git pull "$@"
gl!() git pull --force "$@"

gp() git push "$@"
gp!() git push --force-with-lease "$@"
gpd() git push --dry-run "$@"
gpsup() git push --set-upstream origin $(git_current_branch) "$@"

_git_push_selected_commit() {
    if (( $# < 2 )); then
        echo 'Usage: _git_push_selected_commit COMMIT_HASH LOCAL_BRANCH [UPSTREAM_REMOTE] [UPSTREAM_BRANCH]' >&2
        return 1
    fi

    local commit_hash local_branch upstream_remote upstream_branch
    commit_hash=$1; (( $# > 0 )) && shift
    local_branch=$1; (( $# > 0 )) && shift
    upstream_remote=$1; (( $# > 0 )) && shift
    upstream_branch=$1; (( $# > 0 )) && shift

    local remote
    if [[ -n $upstream_remote ]]; then
        remote=$upstream_remote
    else
        remote=origin
        # Ensure there is an `origin` remote
        if ! command git remote get-url "$remote" &>/dev/null; then
            echo "Error: branch has no upstream remote and default remote '$remote' does not exist" >&2
            return 1
        fi
    fi

    local branch
    branch=${upstream_branch:-refs/heads/$local_branch}

    git push --force-with-lease "$remote" "$commit_hash:$branch"

    # Set upstream branch if pushing for the first time
    if [[ -z $upstream_branch ]]; then
        git branch --set-upstream-to="$remote/$local_branch" "$local_branch"
    fi
}

grb() git rebase "$@"
grba() git rebase --abort "$@"
grbc() git rebase --continue "$@"
grbe() git rebase --edit-todo "$@"
grbi() git rebase --interactive "$@"
grbif() git rebase --interactive --autosquash "$@"

gr() git remote "$@"
gra() git remote add "$@"
grget() git remote get-url "$@"
grset() git remote set-url "$@"
grpa() { git remote | xargs git remote prune; }

grh() git reset "$@"
grhh() git reset --hard "$@"

grm() git rm -r "$@"

grs() git restore "$@"
grsp() git restore -p "$@"

gsta() git stash push "$@"
gstam() git stash push -m "$@"
gstaa() git stash apply "$@"
gstd() git stash drop "$@"
gstp() git stash pop "$@"
gstl() git stash list "$@"
gstls() git stash show --compact-summary "$@"
gsts() git stash show --text "$@"

gs() git status "$@"
gss() git status -s "$@"

gsa() git submodule add --depth=1 "$@"
gsu() git submodule update --init --recursive --depth=1 "$@"

gw() git switch "$@"
gwc() git switch --create "$@"
gwd() git switch --detach "$@"

grt() cd "$(git rev-parse --show-toplevel || echo .)"
