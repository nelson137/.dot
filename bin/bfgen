#!/usr/bin/env python3

"""Generate Brainfuck code that prints out the contents of the given file."""

import sys
from argparse import ArgumentParser
from itertools import groupby

from _io import TextIOWrapper


class OutFile(TextIOWrapper):
    """Allow."""  # TODO

    def __init__(self, outf):
        if isinstance(outf, str):
            self.outf = open(outf, 'w')
        elif isinstance(outf, TextIOWrapper):
            self.outf = outf
        else:
            raise ValueError("Expected type 'str' or 'TextIOWrapper'")

    def __enter__(self):
        """Return the file object."""
        return self

    def __exit__(self, type, value, traceback):
        """Close the file object if it is not sys.stdout."""
        if self.outf is not sys.stdout:
            self.outf.close()

    def write(self, msg):
        """Write msg to the stream object self.outf."""
        self.outf.write(msg)
        if msg[-1] != '\n':
            self.outf.write('\n')


def preprocess(text):
    """Return a list of dicts for each character in text.

    Each dict contains useful information for gen_script to use.
    """
    data = []
    for o in [ord(c) for c in text]:
        r = round(o, -1)  # Round to nearest ten
        data.append({'ord': o, 'rounded': r, 'offset': o-r})

    return data


def gen_script(text):
    """Return Brainfuck code that prints out the given text."""
    data = preprocess(text)
    lines = [list(l[1]) for l in groupby(data, key=lambda x: x['ord'] == 10)]
    script = ''

    for line in lines:
        script += '++++++++++['

        for char in line:
            script += '>' + '+'*(char['rounded']//10)
        script += '<'*len(line) + '-]'

        for char in line:
            op = '+' if char['offset'] > 0 else '-'
            script += '>' + op*abs(char['offset']) + '.'
        script += '>'

    return script


def die(*msg, usage=False):
    """Print msg to stderr and exit.

    If the keyword argument usage is True, this programs' usage is printed.
    """
    if usage:
        msg = 'usage: bfgen [-h] [-o outfile] infile'
    else:
        msg = 'bfgen: error: ' + ' '.join(msg)

    print(msg, file=sys.stderr)
    sys.exit(1)


def main(args):
    """Parse arguments, generate the Brainfuck script, then output it."""
    if args.infn is None:  # if no infn was given
        # If nothing is being piped in, print usage and exit
        if sys.stdin.isatty():
            die(usage=True)
        text = sys.stdin.read()
    else:
        try:
            with open(args.infn, 'r') as f:
                text = f.read()
        except (FileNotFoundError, IsADirectoryError, PermissionError) as e:
            fn_quoted = "'%s'" % args.infn
            if isinstance(e, FileNotFoundError):
                die('no such file:', fn_quoted)
            if isinstance(e, IsADirectoryError):
                die(e.strerror.lower() + ':', fn_quoted)
            elif isinstance(e, PermissionError):
                die(e.strerror.lower() + ':', fn_quoted)

    script = gen_script(text)

    with OutFile(args.outfn) as of:
        of.write(script)


if __name__ == '__main__':
    parser = ArgumentParser(description='')
    parser.add_argument('infn', nargs='?', metavar='infile', default=None,
                        help='')
    parser.add_argument('-o', '--output', dest='outfn', metavar='outfile',
                        default=sys.stdout, help='')
    main(parser.parse_args())
