#!/bin/bash
# Print the external and internal ip addresses as well as the default gateway.



getip_help() {
    echo 'Usage: getip [-h|--help] [-i|-e]'
    echo
    echo 'Print the internal and external ip addresses of this machine.'
    echo
    echo 'If called without any arguments, getip prints out both the internal'
    echo 'and external ip addresses with labels.'
    echo
    echo 'Options:'
    echo '  -h, --help         Print this help message and exit'
    echo '  -e, --external     Print only the external ip address'
    echo '  -i, --internal     Print only the internal ip address'
    echo "  -s, --subnet-mask  Show the internal ip address's subnet mask"
    echo '  -g, --gateway      Print the default gateway'
    echo '  -n, --no-labels    Do not print labels with the output'
    exit 0
}



getip_err() {
    echo "getip: $1" >&2
    exit 1
}



get_ext_ip() {
    if which dig >/dev/null; then
        dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null
    else
        curl -s http://icanhazip.com
    fi
}



get_int_ips() {
    # Whether or not to show the subnet mask
    [[ "$1" == 1 ]] &&
        local show_mask=1

    # The number of columns that all but the first line should be indented by
    [[ "$2" ]] &&
        local indent_cols="$2"

    local all_ifaces=(
        $(ls /sys/class/net | grep -v lo)
    )

    # Attempt to get the internal ip of each network interface
    local -a has_ip int_ips masks
    for iface in "${all_ifaces[@]}"; do
        ip="$(
            ip -4 -o a show "$iface" |
            grep -Po '(?<=inet )[0-9]+(\.[0-9]+){3}/[0-9]+'
        )"
        if [[ "$ip" ]]; then
            has_ip+=( "$iface" )
            int_ips+=( $(cut -d '/' -f 1 <<< "$ip") )
            masks+=( $(cut -d '/' -f 2 <<< "$ip") )
        fi
    done

    # If there are multiple ips label each one with its iface name
    local label='$( (( ${#has_ip[@]} > 1 )) && echo "${has_ip[i]}: " )'
    for (( i=0; i<${#has_ip[@]}; i++ )); do
        (( i > 0 )) &&
            printf "%${indent_cols}s"
        eval "echo ${label}${int_ips[i]}${show_mask:+/${masks[i]}}"
    done
}



get_gateway() {
    ip route | awk '/default/ {print $3}'
}



# Split options
# Ex: -abc becomes -a -b -c
while (( $# > 0 )); do
    if [[ "$1" =~ ^-[^\-]{2,}$ ]]; then
        for (( i=1; i<${#1}; i++ )); do
            argv+=( "-${1:i:1}" )
        done
    else
        argv+=( "$1" )
    fi
    shift
done

# Parse arguments
labels=1
for (( i=0; i<${#argv[@]}; i++ )); do
    arg="${argv[i]}"
    case "$arg" in
        -h|--help)
            help=1 ;;
        -e|--external)
            show_ext=1 ;;
        -i|--internal)
            show_int=1 ;;
        -s|--subnet-mask)
            show_mask=1 ;;
        -g|--gateway)
            show_gateway=1 ;;
        -n|--no-labels)
            unset labels ;;
        -*|--*)
            getip_err "option not recognized: $arg" ;;
        *)
            getip_err "argument not recognized: $arg" ;;
    esac
    shift
done

[[ "$help" == 1 ]] &&
    getip_help

if [[ "$show_ext" ]]; then
    get_ext_ip
elif [[ "$show_int" ]]; then
    get_int_ips
elif [[ "$show_gateway" ]]; then
    get_gateway
else
    echo "${labels:+External: }$(get_ext_ip)"
    echo "${labels:+Internal: }$(get_int_ips "$show_mask" 10)"
    echo "${labels:+Gateway: }$(get_gateway)"
fi
