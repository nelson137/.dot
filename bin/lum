#!/bin/bash
# Get or set the brightness of the screen and/or the physical display

# Screen brightness directory
s_b_dir='/sys/class/backlight/intel_backlight'

# Max screen and display brightnesses
s_b_max="$(cat "${s_b_dir}/max_brightness")"
d_b_max='2'

# Disable -s/--screen if cannot get or modify screen brightness
[[ ! -f "${s_b_dir}/brightness" ]] &&
    s_b_disabled=1

# Disable -d/--display if cannot get or modify display brightness
xrandr -d :0 &>/dev/null ||
    d_b_disabled=1



lum_help() {
    echo 'Usage: lum -h'
    echo '       lum reset'
    echo '       lum [-v] {-s|-d} <brightness>'
    echo
    echo 'Get or set the brightness of the screen or physical display.'
    echo
    echo 'Options:'
    echo '  -h, --help     Print this help message and exit'
    echo '  -v, --verbose  Print warnings'
    echo '  -s, --screen   Set the screen brightness to <brightness>'
    echo '  -d, --display  Set the physical display brightness to <brightness>'
    exit 0
}



lum_err() {
    [[ "$1" == help ]] &&
        lum_help >&2

    echo "lum: $1" >&2
    exit 1
}



lum_warn() {
    echo "lum: warn: $1" >&2
}



lum_warn_disabled() {
    # Print disabled warnings
    [[ "$s_b_disabled" ]] &&
        lum_warn 'cannot get or modify screen brightness'
    [[ "$d_b_disabled" ]] &&
        lum_warn 'cannot get or modify display brightness'
}



lum_set_s_b() {
    # Print error if brightness is not an integer
    [[ "$1" =~ ^[0-9]+$ ]] ||
        lum_err "cannot set brightness to $1"
    # Check if brightness exceeds max
    # - Use bc to compare floats
    (( $(echo "$1 > $s_b_max" | bc -l) )) &&
        lum_err "max screen brightness is $s_b_max"

    # Try to change screen brightness, print error if it fails
    sudo tee "${s_b_dir}/brightness" >/dev/null <<< "$1" ||
        lum_err "cannot set screen brightness to $1"
}



lum_set_d_b() {
    # Check if brightness exceeds max
    # - Use bc to compare floats
    (( $(echo "$1 > $d_b_max" | bc -l) )) &&
        lum_err "max display brightness is $d_b_max"

    local outputs=( $(xrandr | awk '/ connected/ {print $1}') )
    outputs="$(for o in "${outputs[@]}"; do echo -n " --output $o"; done)"

    # Try to change display brightness, print error if it fails
    xrandr -d :0 $outputs --brightness $1 &>/dev/null ||
        lum_err "cannot set display brightness to $1"
}



lum_show_current() {
    # Current screen brightness
    local s_b="$(cat "${s_b_dir}/brightness")"

    # Calculate brightness percent
    # - Get percent with 2 decimal places
    # - Remove trailing zeros
    # - Remove trailling .
    local s_b_percent="$(
        echo "scale=2; 100*${s_b}/${s_b_max}" | bc |
        sed -r 's/0+$//' |
        sed -r 's/\.$//'
    )"

    # Current display brightness
    local d_b="$(
        xrandr -d :0 --verbose 2>/dev/null | awk '/Brightness/ {print $2}'
    )"

    echo "Screen:  ${s_b}/${s_b_max} (${s_b_percent}%)"
    echo "Display: $d_b"
}



lum() {
    # Split options
    # Ex: -abc becomes -a -b -c
    local argv=()
    while [[ "$1" ]]; do
        if [[ "$1" =~ ^-[^\-]{2,}$ ]]; then
            argv+=( $(python3 -c 'print(" -".join(input())[2:])' <<< "$1") )
        else
            argv+=( "$1" )
        fi
        shift
    done

    # Parse arguments
    local arg help verbose set_s s_b set_d d_b reset_both
    for (( i=0; i<${#argv[@]}; i++ )); do
        arg="${argv[i]}"
        case "$arg" in
            -h|--help)
                help=1 ;;
            -v|--verbose)
                verbose=1 ;;
            -s|--screen)
                [[ "$s_b_disabled" == 1 ]] &&
                    lum_err 'cannot get or modify screen brightness'
                set_s=1
                ((i++))
                s_b="${argv[i]}" ;;
            -d|--display)
                [[ "$d_b_disabled" == 1 ]] &&
                    lum_err 'cannot get or modify display brightness'
                set_d=1
                ((i++))
                d_b="${argv[i]}" ;;
            -*|--*)
                lum_err "option not recognized: $arg" ;;
            *)
                [[ "$arg" != reset ]] &&
                    lum_err help
                reset_both=1 ;;
        esac
    done

    [[ "$help" == 1 ]] &&
        lum_help

    # -s/--screen was given without a brightness
    [[ "$set_s" && -z "$s_b" ]] &&
        lum_err help

    # -d/--display was given without a brightness
    [[ "$set_d" && -z "$d_b" ]] &&
        lum_err help

    # User tried to set screen and/or display brightness and reset both
    [[ "$set_s" || "$set_d" ]] && [[ "$reset_both" ]] &&
        lum_err help

    # Print current screen and display brightnesses
    if [[ -z "$set_s" && -z "$set_d" && -z "$reset_both" ]]; then
        lum_show_current

        [[ "$verbose" ]] &&
            lum_warn_disabled

        exit 0
    fi

    # Default brightness values
    local s_b_default='61'
    local d_b_default='1'

    # Reset both screen and display brightnesses
    if [[ "$reset_both" ]]; then
        # Reset screen brightness
        [[ ! "$s_b_disabled" ]] &&
            lum_set_s_b "$s_b_default"

        # Reset display brightness
        [[ ! "$d_b_disabled" ]] &&
            lum_set_d_b "$d_b_default"

        # Print disabled warnings if verbose
        [[ "$verbose" ]] &&
            lum_warn_disabled

        exit 0
    fi

    # Set screen brightness
    if [[ "$set_s" ]]; then
        if [[ "$s_b" == reset ]]; then
            # Reset screen brightness
            lum_set_s_b "$s_b_default"
        else
            # Set screen brightness to $s_b
            lum_set_s_b "$s_b"
        fi
    fi

    # Set display brightness
    if [[ "$set_d" ]]; then
        if [[ "$d_b" == reset ]]; then
            # Reset display brightness
            lum_set_d_b "$d_b_default"
        else
            # Set display brightness to $d_b
            lum_set_d_b "$d_b"
        fi
    fi
}



lum "$@"
