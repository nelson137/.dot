#!/bin/bash
# Get or set the brightness of the screen and/or the physical display
# TODO: [[ ! -f /sys/class/backlight/intel_backlight/brightness ]] && disable -s

lum_help() {
    {
        echo -n 'Usage: lum [-h|--help] [-s|--screen|-d|--display]'
        echo ' [BRIGHTNESS]'
        echo
        echo 'Get or set the brightness of the screen or physical display.'
        echo
        echo 'Options:'
        echo '  -h, --help     Print this help message and exit'
        echo '  -s, --screen   Set the screen brightness to BRIGHTNESS'
        echo '  -d, --display  Set the physical display brightness to BRIGHTNESS'
    } >&2
    exit
}

lum_err() {
    echo "lum: $1" >&2
    exit 1
}

lum() {
    # Max screen and display brightnesses
    local s_max="$(cat /sys/class/backlight/intel_backlight/max_brightness)"
    local d_max=2

    # Output current screen and display brightness if no arguments were given
    if [[ $# == 0 ]]; then
        # Get current and max screen brightness, calculate brightness percent
        local s="$(cat /sys/class/backlight/intel_backlight/brightness)"
        local s_p="$(echo "scale=2; 100*${s}/${s_max}" | bc)"  # Brightness %
        s_p="$(echo "$s_p" | sed -r 's/0+$//')"  # Remove trailing zeros
        s_p="$(echo "$s_p" | sed -r 's/\.$//')"  # Remove trailing .

        # Get current display brightness
        local d="$(xrandr -d :0 --verbose | awk '/Brightness/ {print $2}')"

        echo "Screen:  ${s}/${s_max} (${s_p}%)"
        echo "Display: $d"
        return
    fi

    # Parse arguments
    local help set_screen set_display
    local -a brightness
    while [[ $# > 0 ]]; do
        case $1 in
            -h|--help)
                help=1 ;;
            -s|--screen)
                set_screen=1 ;;
            -d|--display)
                set_display=1 ;;
            -*|--*)
                lum_err "option not recognized: $1" ;;
            *)
                brightness+=( "$1" ) ;;
        esac
        shift
    done

    [[ "$help" ]] &&
        lum_help

    # Both -s and -d were given
    [[ "$set_screen" && "$set_display" ]] &&
        lum_err 'cannot set screen and display brightness at the same time'

    # No brightness was given
    [[ "${#brightness[@]}" == 0 ]] &&
        lum_err 'no brightness given'

    # Multiple brightnesses were given
    [[ "${#brightness[@]}" > 1 ]] &&
        lum_err 'cannot set more than one brightness at the same time'

    local brightness="${brightness[0]}"

    # Commands to set brightness and their default values
    local screen_cmd='sudo tee /sys/class/backlight/intel_backlight/brightness >/dev/null <<<'
    local screen_default='61'
    local display_cmd='xrandr -d :0 --output eDP-1 --brightness'
    local display_default='1.0'

    if [[ "$set_screen" == 1 ]]; then  # Set screen brightness
        local cmd="$screen_cmd"

        if [[ "$brightness" == reset ]]; then
            eval "$cmd $screen_default"
        else
            # Error out if brightness is not an integer
            [[ "$brightness" =~ ^[0-9]+$ ]] ||
                lum_err "cannot set brightness to $brightness"
            # Use bc to compare floating point numbers
            (( $(echo "$brightness > $s_max" | bc -l) )) &&
                lum_err "max screen brightness is $s_max"
            eval "$cmd $brightness"
        fi
    elif [[ "$set_display" == 1 ]]; then  # Set display brightness
        local cmd="$display_cmd"

        if [[ "$brightness" == reset ]]; then
            eval "$cmd $display_default"
        else
            # Use bc to compare floating point numbers
            (( $(echo "$brightness > $d_max" | bc -l) )) &&
                lum_err "max display brightness is $d_max"
            # Error out if xrandr call fails
            eval "$cmd $brightness &>/dev/null" ||
                lum_err "cannot set brightness to $brightness"
        fi
    else  # No -s or -d option was given
        if [[ "$brightness" == reset ]]; then
            # Reset both screen and display brightnesses
            eval "$screen_cmd $screen_default"
            eval "$display_cmd $display_default"
        else
            lum_err '-s or -d is required'
        fi
    fi
}

lum "$@"
