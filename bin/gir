#!/bin/bash
# Create a git repository on Github and pull it

attrs=(user "$USER" application gir)



gir_help() {
    echo 'Usage: gir [-h|--help] <directory>'
    echo
    echo 'Create a Github repository and pull it.'
    echo
    echo 'Uses the Github API to create a repository with a README.md file,'
    echo 'then pulls it.'
    echo
    echo 'Arguments:'
    echo '  -h, --help   Print this help message and exit'
    echo '  <directory>  The name of the Github repo that will be created'
    exit
}



gir_err() {
    [[ "$1" == help ]] &&
        gir_help >&2

    echo "gir: $1" >&2
    exit 1
}



gir_store_passwd() {
    read -rsp 'Github Password: ' gh_passwd
    echo

    [[ -z "$gh_passwd" ]] &&
        gir_err 'github password cannot be blank'

    # Store password
    secret-tool store --label 'Github Password' "${attrs[@]}" <<< "$gh_passwd"
}



gir() {
    [[ $# == 0 ]] &&
        gir_err help

    # Parse arguments
    local help repo
    while [[ $# > 0 ]]; do
        case $1 in
            -h|--help)
                help=1 ;;
            -*|--*)
                gir_err "option not recognized: $1" ;;
            *)
                [[ -n "$repo" ]] &&
                    gir_err help
                repo="$1" ;;
        esac
        shift
    done

    [[ "$help" == 1 ]] &&
        gir_help

    # Use Github API to create repo
    local passwd="$(secret-tool lookup "${attrs[@]}" || gir_store_passwd)"
    local auth="nelson137:$passwd"
    local data='{ "name": "'"$repo"'", "auto_init": true }'
    curl -sSLu "$auth" -d "$data" "https://api.github.com/user/repos" && {
        git pull "git@github.com:nelson137/${repo}.git"
        exit
    }

    # Curl POST failed
    echo 'Could not create Github repo.'
    read -rp 'Would you like to re-cache the password (yes/no)? ' response
    if [[ "$response" =~ ^[Yy]([Ee][Ss])?$ ]]; then
        gir_store_passwd
        gir "$@"
    else
        gir_err 'not re-caching github password'
    fi
}



gir "$@"
