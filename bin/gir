#!/bin/bash
# Create a git repository on Github and clone it

attrs=(user "$USER" application gir)



gir_help() {
    echo 'Usage: gir [-h|--help] <directory>'
    echo
    echo 'Create a Github repository and clone it.'
    echo
    echo 'Uses the Github API to create a repository with a README.md file,'
    echo 'then clones it.'
    echo
    echo 'Arguments:'
    echo '  -h, --help   Print this help message and exit'
    echo '  <directory>  The name of the Github repo that will be created'
    exit 0
}



gir_err() {
    [[ "$1" == help ]] &&
        gir_help >&2

    echo "gir: $1" >&2
    exit 1
}



gir_store_token() {
    read -rp 'Github Token: ' gh_token
    echo

    [[ -z "$gh_token" ]] &&
        gir_err 'github token cannot be blank'

    # Store token
    secret-tool store --label 'Github API Token' "${attrs[@]}" <<< "$gh_token"
}



gir() {
    [[ $# == 0 ]] &&
        gir_err help

    # Parse arguments
    local help repo
    while (( $# > 0 )); do
        case "$1" in
            -h|--help)
                help=1 ;;
            -*|--*)
                gir_err "option not recognized: $1" ;;
            *)
                [[ "$repo" ]] &&
                    gir_err help
                repo="$1" ;;
        esac
        shift
    done

    [[ "$help" == 1 ]] &&
        gir_help

    # Use Github API to create repo
    local data="{ \"name\": \"$repo\", \"auto_init\": true }"
    local token="$(secret-tool lookup "${attrs[@]}" || gir_store_token)"
    local url="https://api.github.com/user/repos?access_token=$token"
    curl -sSL -d "$data" "$url" >/dev/null && {
        git clone "git@github.com:nelson137/${repo}.git"
        exit
    }

    # Curl POST failed
    shopt -s nocasematch  # =~ match case insensitively
    echo 'Could not create Github repo.'
    read -rp 'Would you like to re-cache the token (yes/no)? ' response
    if [[ "$response" =~ ^y(es)?$ ]]; then
        gir_store_passwd
        gir "$@"
    else
        gir_err 'not re-caching Github token'
    fi
}



gir "$@"
