#!/bin/bash
#
# Get battery stats



bat_help() {
    echo 'Usage: bat [-h|--help] [-p|-s]'
    echo
    echo 'Get battery stats.'
    echo
    echo 'Options:'
    echo '  -h, --help    Print this help message and exit'
    echo '  -p, --percent Print only the battery percent'
    echo '  -s, --state   Print only the battery state'
    echo '  -t, --time    Print the estimated time until empty'
    echo '  --dry-run     Check that upower is installed'
    exit 0
}



bat_err() {
    echo "bat: $1" >&2
    exit 1
}



# Split options
# Ex: -abc becomes -a -b -c
while (( $# > 0 )); do
    if [[ "$1" =~ ^-[^\-]{2,}$ ]]; then
        for (( i=1; i<${#1}; i++ )); do
            argv+=( "-${1:i:1}" )
        done
    else
        argv+=( "$1" )
    fi
    shift
done

# Parse arguments
for arg in "${argv[@]}"; do
    case "$arg" in
        -h|--help)
            help=1 ;;
        -p|--percent)
            show_percent=1 ;;
        -s|--state)
            show_state=1 ;;
        -t|--time)
            show_time=1 ;;
        --dry-run)
            dry_run=1 ;;
        -*|--*)
            bat_err "option not recognized: $arg" ;;
        *)
            bat_err "argument not recognized: $arg" ;;
    esac
    shift
done

[[ "$help" == 1 ]] &&
    bat_help

# Check that upower is installed
which upower >/dev/null || bat_err 'upower is not installed'

# Exit right after checking upower is installed if --dry-run was given
[[ "$dry_run" == 1 ]] && exit

stats="$(upower -i "$(upower -e | grep BAT)")"
if [[ "$show_percent" == 1 ]]; then
    awk '/percentage/ {print $2}' <<< "$stats" | sed 's/%//'
elif [[ "$show_state" == 1 ]]; then
    awk '/state/ {print $2}' <<< "$stats"
elif [[ "$show_time" == 1 ]]; then
    sed -nr 's/^\s*time to empty:\s*([0-9]+.*)$/\1/p' <<< "$stats"
else
    grep -E --color=never 'percentage|state|to empty' <<< "$stats"
fi
