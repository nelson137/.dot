#!/usr/bin/env python3
#
# Brainfuck Interpreter
# Copyright 2011 Sebastian Kaspari

"""usage: brainfuck INFILE"""


import sys
from argparse import ArgumentParser


class _GetchUnix:
    def __init__(self):
        import tty

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


class _Getch:
    """Gets a single character from standard input."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self):
        return self.impl()


def cleanup(code):
    out = filter(lambda x: x in ['>', '<', '+', '-', '[', ']', '.', ','], code)
    return list(out)


def buildbracemap(code):
    temp_bracestack, bracemap = [], {}
    for pos, cmd in enumerate(code):
        if cmd == "[": temp_bracestack.append(pos)
        if cmd == "]":
            start = temp_bracestack.pop()
            bracemap[start] = pos
            bracemap[pos] = start

    return bracemap


def evaluate(code):
    bracemap = buildbracemap(code)
    cells = [0]
    codeptr, cellptr = 0, 0

    while codeptr < len(code):
        command = code[codeptr]
        if command == ">":
            cellptr += 1
            if cellptr == len(cells): cells.append(0)
        elif command == "<":
            cellptr = 0 if cellptr <= 0 else cellptr - 1
        elif command == "+":
            cells[cellptr] = cells[cellptr] + 1 if cells[cellptr] < 255 else 0
        elif command == "-":
            cells[cellptr] = cells[cellptr] - 1 if cells[cellptr] > 0 else 255
        elif command == "[" and cells[cellptr] == 0:
            codeptr = bracemap[codeptr]
        elif command == "]" and cells[cellptr] != 0:
            codeptr = bracemap[codeptr]
        elif command == ".":
            sys.stdout.write(chr(cells[cellptr]))
        elif command == ",":
            getch = _Getch()
            cells[cellptr] = ord(getch())
        
        codeptr += 1


def print_err(err='', reason=None, usage=False):
    if usage:
        msg = 'usage: brainfuck [-h] [infile]'
    else:
        msg = 'brainfuck: error: ' + err
        if reason is not None: msg += ': ' + reason
    print(msg, file=sys.stderr)
    sys.exit(1)


def main(args):
    if not args.infns:
        if not sys.stdin.isatty():
            code = sys.stdin.read()
        else:
            print_err(usage=True)
    else:
        for fn in args.infns:
            try:
                with open(fn, 'r') as script:
                    code = script.read()
            except FileNotFoundError:
                print_err(err='cannot open file', reason=args.infns)

            evaluate(cleanup(code))


if __name__ == '__main__':
    parser = ArgumentParser(description='')
    parser.add_argument('infns', nargs='*', metavar='infiles', default=None,
                        help='')
    main(parser.parse_args())
